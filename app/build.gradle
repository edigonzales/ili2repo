plugins {
    id 'application'
    id 'org.graalvm.buildtools.native' version '0.9.14'
    id 'org.jreleaser' version '1.2.0'
}

apply from: "$rootDir/gradle/versioning.gradle"

sourceCompatibility = '17'
targetCompatibility = '17'

compileJava {
    options.compilerArgs.addAll(['--release', '17'])
}

def myArtifactId = "ili2repo"
def os = org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.currentOperatingSystem; 

repositories {
    mavenCentral()
    maven { url "https://jars.interlis.ch" }
}

configurations {
    jar.archiveName = myArtifactId+"-"+version+".jar"
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'

    implementation 'info.picocli:picocli:4.6.3'
    implementation 'info.picocli:picocli-codegen:4.6.3'
    annotationProcessor 'info.picocli:picocli-codegen:4.6.3'
    
    implementation 'ch.interlis:iox-ili:1.21.12'
    implementation 'ch.interlis:ili2c-core:5.2.7'
    implementation 'ch.interlis:ili2c-tool:5.2.7'
    implementation 'ch.interlis:ilivalidator:1.12.0'

    implementation 'commons-codec:commons-codec:1.15'      
}

application {
    mainClass = 'ch.so.agi.ili2repo.App'
}

tasks.named('test') {
    useJUnitPlatform()
}

run {
    //args = ["--help"]
    //args = ["--directory=/Users/stefan/tmp/ili2repo/models/"]
    args = ["--server", "--directory=/Users/stefan/tmp/ili2repo/models/", "--init"]
}

graalvmNative {
    binaries {
        main {
            imageName = 'ili2repo'
            mainClass = 'ch.so.agi.ili2repo.App' 
            debug = false 
            verbose = true 
            fallback = false 
            configurationFileDirectories.from(file('src/main/resources/META-INF/native-image/')) 

            buildArgs.add('--enable-url-protocols=http,https') 
            buildArgs.add('-H:IncludeResourceBundles=com.sun.org.apache.xerces.internal.impl.msg.XMLMessages');
            
            // https://github.com/oracle/graal/issues/4671 
            // Should be fixed in 22.3
            buildArgs.add("-J--add-modules")
            buildArgs.add("-JALL-SYSTEM")
            
            //jvmArgs.add("-Djava.awt.headless=false")
            /*
            agent {
                enabled = true 
            }
            */
        }
        test {
            verbose = true
            fallback = false 
            buildArgs.add('--enable-url-protocols=http,https') 
            buildArgs.add('-H:IncludeResourceBundles=com.sun.org.apache.xerces.internal.impl.msg.XMLMessages');
        }
    }
}

startScripts {
   applicationName = myArtifactId
}

distZip {
    archiveBaseName = myArtifactId
}

distTar {
    compression = Compression.GZIP
    archiveExtension = "tar.gz"
    archiveBaseName = myArtifactId
}

distributions {
    nativeImage {
        contents {
            from 'build/native/nativeCompile/'
        }
    }
}

nativeImageDistZip {
    archiveName myArtifactId + '-' + project.version.toString() + '-' + getOperatingSystemName() + '-' + getArchitectureName() + ".zip"
}

jreleaser {
    gitRootSearch = true
    
    project {
        name = myArtifactId
        description = 'Creates an ilimodels.xml file from a directory with INTERLIS model files.'
        website = 'https://agi.so.ch'
        authors = ['edigonzales']
        license = 'MIT'
        docsUrl = 'https://github.com/edigonzales/ili2repo'
        copyright = '2022 Stefan Ziegler'
    }
    release {
        github {
            repoOwner = 'edigonzales'
            overwrite = true
            apiEndpoint = 'https://api.github.com'
        }
    }
    distributions {
        appJvm {
            distributionType = 'JAVA_BINARY'
            stereotype = 'CLI'
            artifact {
                path = "../artifacts-jvm/ili2repo-${version}.zip"
            }
            java {
                groupId = 'ch.so.agi'
                artifactId = myArtifactId
                version = '17'
            }
        }
        appNative {
            distributionType = 'NATIVE_IMAGE'
            stereotype = 'CLI'
            artifact {
                path = "../artifacts-native/ili2repo-${version}-linux-x86-64.zip"
                platform = 'linux'
            }
            artifact {
                path = "../artifacts-native/ili2repo-${version}-osx-x86-64.zip"
                platform = 'osx'
            }
            artifact {
                path = "../artifacts-native/ili2repo-${version}-windows-x86-64.zip"
                platform = 'windows'
            }
        }
    }
}

def getOperatingSystemName() {
    def os = org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.currentOperatingSystem; 
    def osName = os.getName().toLowerCase();
    if (osName.contains("windows")) {
        return "windows";
    } else if (osName.contains("mac os x") || osName.contains("darwin") || osName.contains("osx")) {
        return "osx";
    } else if (osName.contains("linux")) {
        return "linux";
    } else {
        // not strictly true
        return "unix";
    }
}

def getArchitectureName() {
    def arch = org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.currentArchitecture; 
    def archName = arch.getName().toLowerCase();
    return archName;    
}